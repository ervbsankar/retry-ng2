{"version":3,"sources":["service/rest-api.service.ts"],"names":[],"mappings":"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","file":"service/rest-api.service.js","sourcesContent":["/*\n This is first service extract login information from another server\n */\nimport {Injectable} from \"@angular/core\";\nimport {Http, Response} from \"@angular/http\";\nimport {Observable} from \"rxjs/Rx\";\n\nimport \"rxjs/add/operator/map\";\nimport \"rxjs/add/operator/catch\";\n\n@Injectable()\nexport class RestApiService {\n\n    arrayList = [{id: 1, status: \"IN_PROGRESS\"}, {id: 2, status: \"COMPLETED\"}];\n    mmisNoticeJobs=[{\"job\": \"13\", \"database\": \"11\"},\n        {\"job\": \"19\", \"database\": \"19\"},\n        {\"job\": \"17\", \"database\": \"15\"},\n        {\"job\": \"18\", \"database\": \"16\"},\n        {\"job\": \"20\", \"database\": null}];\n\n    dellNoticeJobs=[{\"job\": \"11\", \"database\": \"10\"},\n        {\"job\": \"21\", \"database\": null}];\n\n    mmisTransJobs=[{\"job\": \"9\", \"database\": \"8\"},\n        {\"job\": \"10\", \"database\": \"9\"}];\n\n    dellTransJobs=[{\"job\": \"3\", \"database\": \"2\"},\n        {\"job\": \"8\", \"database\": \"7\"}];\n\n    constructor(private _http: Http) {\n    }\n\n    private loginUrl = \"http://localhost:8080/batchMonitor/rest/API\";\n\n    getJobStatus(jobType: string, createdDate: string): Observable<Array<Object>> {\n        var restUrl = this.loginUrl + \"/job/\" + jobType + \"/\" + createdDate;\n        return this._http.get(restUrl, {withCredentials: false})\n            .map((res: Response) => res.json() || {})\n            .catch((error: any) => Observable.throw((error.message) ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error'))\n            ;\n    }\n\n    getJobList(funcArea: string) : any {\n         if(funcArea == \"MMIS Notices\"){\n             return this.mmisNoticeJobs;\n         }else if(funcArea == \"Dell Notices\"){\n             return this.dellNoticeJobs;\n         }else if(funcArea == \"MMIS Trans\"){\n             return this.mmisTransJobs;\n         } else if(funcArea == \"Dell Trans\"){\n             return this.dellTransJobs;\n         }\n    }\n\n    runTenSeconds() {\n        return Observable.interval(10000)\n            .take(5)\n            .map(i => i * 2)\n            ;\n        //.do(i => console.log(i));\n    }\n\n    test() {\n        return Observable.create((observer) => {\n            observer.next(1);\n            observer.next(2);\n            setTimeout(() => {\n                observer.next(3);\n                observer.complete();\n            }, 1000)\n        })\n            ;\n    }\n\n\n    repeatTest() {\n         return Observable.interval(5000)\n             .flatMap((x) => {\n                 return Observable.from(this.arrayList);\n             });\n        //Observable.from(this.arrayList);\n\n    }\n\n}"],"sourceRoot":"/source/"}