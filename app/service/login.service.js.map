<<<<<<< HEAD
{"version":3,"sources":["service/login.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;EAEE;AACF,uBAAyB,eAAe,CAAC,CAAA;AACzC,uBAA6B,eAAe,CAAC,CAAA;AAC7C,qBAAyB,SAAS,CAAC,CAAA;AAEnC,QAAO,uBAAuB,CAAC,CAAA;AAC/B,QAAO,yBAAyB,CAAC,CAAA;AAGjC;IAII,YAAoB,KAAW;QAAX,UAAK,GAAL,KAAK,CAAM;QAF/B,cAAS,GAAG,CAAC,EAAC,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,WAAW,EAAC,EAAC,EAAC,EAAE,EAAE,CAAC,EAAE,MAAM,EAAC,WAAW,EAAC,CAAC,CAAC;QAK/D,aAAQ,GAAG,qDAAqD,CAAC;IAFzE,CAAC;IAID,QAAQ;QACN,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAC,EAAC,eAAe,EAAE,KAAK,EAAC,CAAC;aACxD,GAAG,CAAC,CAAC,GAAa,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;aACxC,KAAK,CAAC,CAAC,KAAU,KAAK,eAAU,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,MAAM,KAAK,CAAC,UAAU,EAAE,GAAG,cAAc,CAAC,CAAC,CAAC;IAC1J,CAAC;IAED,aAAa;QACT,MAAM,CAAC,eAAU,CAAC,QAAQ,CAAC,KAAK,CAAC;aAC5B,IAAI,CAAC,CAAC,CAAC;aACP,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CACf;QACD,2BAA2B;IACnC,CAAC;IAED,IAAI;QACA,MAAM,CAAC,eAAU,CAAC,MAAM,CAAE,CAAC,QAAQ;YAC/B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,UAAU,CAAC;gBACP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjB,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACxB,CAAC,EAAC,IAAI,CAAC,CAAA;QACX,CAAC,CAAC,CACD;IACL,CAAC;IAGD,UAAU;QACN,MAAM,CAAC,eAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAEjC;IACT,CAAC;AAEL,CAAC;AA3CD;IAAC,iBAAU,EAAE;;gBAAA;AACA,oBAAY,eA0CxB,CAAA","file":"service/login.service.js","sourcesContent":["/*\n This is first service extract login information from another server\n*/\nimport {Injectable} from \"@angular/core\";\nimport {Http, Response} from \"@angular/http\";\nimport {Observable} from \"rxjs/Rx\";\n\nimport \"rxjs/add/operator/map\";\nimport \"rxjs/add/operator/catch\";\n\n@Injectable()\nexport class LoginService {\n\n    arrayList = [{id: 1, status: \"COMPLETED\"},{id: 2, status:\"COMPLETED\"}];\n\n    constructor(private _http: Http){\n    }\n\n    private loginUrl = \"http://localhost:8080/batchMonitor/rest/sample/show\";\n\n    getLogin() : Observable<String> {\n      return this._http.get(this.loginUrl,{withCredentials: false})\n          .map((res: Response) => res.json() || {})\n          .catch((error: any) => Observable.throw((error.message) ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error'));\n    }\n\n    runTenSeconds() {\n        return Observable.interval(10000)\n            .take(5)\n            .map(i => i * 2)\n            ;\n            //.do(i => console.log(i));\n    }\n\n    test() {\n        return Observable.create( (observer) => {\n            observer.next(1);\n            observer.next(2);\n            setTimeout(() => {\n                observer.next(3);\n                observer.complete();\n            },1000)\n        })\n        ;\n    }\n\n\n    repeatTest()  {\n        return Observable.from(this.arrayList)\n           // .repeat(2)\n            ;\n    }\n\n}"],"sourceRoot":"/source/"}
=======
{"version":3,"sources":["service/login.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;EAEE;AACF,uBAAyB,eAAe,CAAC,CAAA;AACzC,uBAA6B,eAAe,CAAC,CAAA;AAC7C,qBAAyB,SAAS,CAAC,CAAA;AAEnC,QAAO,uBAAuB,CAAC,CAAA;AAC/B,QAAO,yBAAyB,CAAC,CAAA;AAGjC;IAEI,YAAoB,KAAW;QAAX,UAAK,GAAL,KAAK,CAAM;QAGvB,aAAQ,GAAG,qDAAqD,CAAC;IAFzE,CAAC;IAID,QAAQ;QACN,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAC,EAAC,eAAe,EAAE,KAAK,EAAC,CAAC;aACxD,GAAG,CAAC,CAAC,GAAa,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;aACxC,KAAK,CAAC,CAAC,KAAU,KAAK,eAAU,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,MAAM,KAAK,CAAC,UAAU,EAAE,GAAG,cAAc,CAAC,CAAC,CAAC;IAC1J,CAAC;IAED,aAAa;QACT,MAAM,CAAC,eAAU,CAAC,QAAQ,CAAC,KAAK,CAAC;aAC5B,IAAI,CAAC,CAAC,CAAC;aACP,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CACf;QACD,2BAA2B;IACnC,CAAC;IAED,IAAI;QACA,MAAM,CAAC,eAAU,CAAC,MAAM,CAAE,CAAC,QAAQ;YAC/B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,UAAU,CAAC;gBACP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjB,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACxB,CAAC,EAAC,IAAI,CAAC,CAAA;QACX,CAAC,CAAC,CACD;IACL,CAAC;AAEL,CAAC;AAlCD;IAAC,iBAAU,EAAE;;gBAAA;AACA,oBAAY,eAiCxB,CAAA","file":"service/login.service.js","sourcesContent":["/*\r\n This is first service extract login information from another server\r\n*/\r\nimport {Injectable} from \"@angular/core\";\r\nimport {Http, Response} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Rx\";\r\n\r\nimport \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/catch\";\r\n\r\n@Injectable()\r\nexport class LoginService {\r\n\r\n    constructor(private _http: Http){\r\n    }\r\n\r\n    private loginUrl = \"http://localhost:8080/batchMonitor/rest/sample/show\";\r\n\r\n    getLogin() : Observable<String> {\r\n      return this._http.get(this.loginUrl,{withCredentials: false})\r\n          .map((res: Response) => res.json() || {})\r\n          .catch((error: any) => Observable.throw((error.message) ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error'));\r\n    }\r\n\r\n    runTenSeconds() {\r\n        return Observable.interval(10000)\r\n            .take(5)\r\n            .map(i => i * 2)\r\n            ;\r\n            //.do(i => console.log(i));\r\n    }\r\n\r\n    test() {\r\n        return Observable.create( (observer) => {\r\n            observer.next(1);\r\n            observer.next(2);\r\n            setTimeout(() => {\r\n                observer.next(3);\r\n                observer.complete();\r\n            },1000)\r\n        })\r\n        ;\r\n    }\r\n\r\n}"],"sourceRoot":"/source/"}
>>>>>>> c299d0fe1787500982cded4b2549acb8a35212bc
