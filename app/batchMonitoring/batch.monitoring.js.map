{"version":3,"sources":["batchMonitoring/batch.monitoring.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,wCAAgD;AAChD,4DAAsD;AACtD,gCAA8C;AAO9C,IAAa,qBAAqB,GAAlC;IAUI,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;QAR9C,cAAS,GAAC,CAAC,cAAc,EAAC,cAAc,EAAC,YAAY,EAAC,YAAY,CAAC,CAAC;IASpE,CAAC;IAPD,QAAQ;QACJ,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAOD,SAAS;QACL,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC;IAC5F,CAAC;IAED,IAAI;QACA,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC;YAC/B,IAAI,EAAE,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC;YACnC,QAAQ,EAAE,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;SACtC,CAAC,CAAC;IACP,CAAC;IAED,WAAW,CAAC,QAAQ;QAChB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAE1B,CAAC;IAED,UAAU;QACF,yCAAyC;QAC7C,yBAAyB;QACzB,IAAI,CAAC,GAAG,CAAC,CAAC;QACT,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,CAAC;YACzD,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACX,CAAC,EAAE,CAAC;YACJ,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACf,EAAE,CAAA,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACP,QAAQ,CAAC,WAAW,EAAE,CAAC;YAC3B,CAAC;QACL,CAAC,CAAC,CAAC;QAEJ,IAAI,OAAO,GAAG,cAAS,CAAC,KAAK,CAAC;QAC9B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;CACJ,CAAA;AA9CY,qBAAqB;IALjC,gBAAS,CAAC;QACP,QAAQ,EAAE,cAAc;QACxB,WAAW,EAAE,6CAA6C;KAC7D,CAAC;qCAYoC,4BAAY;GAVrC,qBAAqB,CA8CjC;AA9CY,sDAAqB","file":"batch.monitoring.js","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\r\nimport {LoginService} from \"../service/login.service\";\r\nimport {Observable, Scheduler} from \"rxjs/Rx\";\r\n\r\n@Component({\r\n    selector: \"product-list\",\r\n    templateUrl: \"./app/batchMonitoring/batch.monitoring.html\"\r\n})\r\n\r\nexport class BatchMonitorComponent implements OnInit {\r\n\r\n    funcAreas=['MMIS Notices','Dell Notices','MMIS Trans','Dell Trans'];\r\n\r\n    ngOnInit(): void {\r\n        this.runMethod();\r\n    }\r\n\r\n    result: any;\r\n\r\n    constructor(private loginService: LoginService) {\r\n    }\r\n\r\n    runMethod() {\r\n        this.loginService.runTenSeconds().subscribe(value => console.log(\"received: \" + value));\r\n    }\r\n\r\n    test() {\r\n        this.loginService.test().subscribe({\r\n            next: x => console.log(\"test \" + x),\r\n            complete: () => console.log('done')\r\n        });\r\n    }\r\n\r\n    getFuncArea(funcArea) {\r\n        console.log(funcArea);\r\n\r\n    }\r\n\r\n    repeatTest(){\r\n            //.filter( c => c.status == \"COMPLETED\");\r\n        //observer.subscribeOn();\r\n        let i = 0;\r\n         let subscrip = this.loginService.repeatTest().subscribe(x => {\r\n         console.log('repeat: ');\r\n         console.log(x);\r\n             i++;\r\n             console.log(i);\r\n             if(i > 5) {\r\n                 subscrip.unsubscribe();\r\n             }\r\n         });\r\n\r\n        let dispose = Scheduler.async;\r\n        console.log(dispose.active);\r\n    }\r\n}\r\n"]}