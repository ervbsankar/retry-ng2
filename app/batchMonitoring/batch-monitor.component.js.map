{"version":3,"sources":["batchMonitoring/batch-monitor.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uBAAgC,eAAe,CAAC,CAAA;AAChD,mCAA6B,6BAA6B,CAAC,CAAA;AAC3D,qBAAoC,SAAS,CAAC,CAAA;AAO9C;IAUI,YAAoB,YAA4B;QAA5B,iBAAY,GAAZ,YAAY,CAAgB;QARhD,cAAS,GAAC,CAAC,cAAc,EAAC,cAAc,EAAC,YAAY,EAAC,YAAY,CAAC,CAAC;IASpE,CAAC;IAPD,QAAQ;QACJ,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAOD,SAAS;QACL,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC;IAC5F,CAAC;IAED,IAAI;QACA,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC;YAC/B,IAAI,EAAE,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC;YACnC,QAAQ,EAAE,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;SACtC,CAAC,CAAC;IACP,CAAC;IAED,WAAW,CAAC,QAAQ;QAChB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAE1B,CAAC;IAED,UAAU;QACF,yCAAyC;QAC7C,yBAAyB;QACzB,IAAI,CAAC,GAAG,CAAC,CAAC;QACT,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,CAAC;YACzD,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACX,CAAC,EAAE,CAAC;YACJ,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACf,EAAE,CAAA,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACP,QAAQ,CAAC,WAAW,EAAE,CAAC;YAC3B,CAAC;QACL,CAAC,CAAC,CAAC;QAEJ,IAAI,OAAO,GAAG,cAAS,CAAC,KAAK,CAAC;QAC9B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;AACL,CAAC;AAnDD;IAAC,gBAAS,CAAC;QACP,QAAQ,EAAE,cAAc;QACxB,WAAW,EAAE,oBAAoB;KACpC,CAAC;;yBAAA;AAEW,6BAAqB,wBA8CjC,CAAA","file":"batchMonitoring/batch-monitor.component.js","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\nimport {RestApiService} from \"../service/rest-api.service\";\nimport {Observable, Scheduler} from \"rxjs/Rx\";\n\n@Component({\n    selector: \"product-list\",\n    templateUrl: \"batch-monitor.html\"\n})\n\nexport class BatchMonitorComponent implements OnInit {\n\n    funcAreas=['MMIS Notices','Dell Notices','MMIS Trans','Dell Trans'];\n\n    ngOnInit(): void {\n        this.runMethod();\n    }\n\n    result: any;\n\n    constructor(private loginService: RestApiService) {\n    }\n\n    runMethod() {\n        this.loginService.runTenSeconds().subscribe(value => console.log(\"received: \" + value));\n    }\n\n    test() {\n        this.loginService.test().subscribe({\n            next: x => console.log(\"test \" + x),\n            complete: () => console.log('done')\n        });\n    }\n\n    getFuncArea(funcArea) {\n        console.log(funcArea);\n\n    }\n\n    repeatTest(){\n            //.filter( c => c.status == \"COMPLETED\");\n        //observer.subscribeOn();\n        let i = 0;\n         let subscrip = this.loginService.repeatTest().subscribe(x => {\n         console.log('repeat: ');\n         console.log(x);\n             i++;\n             console.log(i);\n             if(i > 5) {\n                 subscrip.unsubscribe();\n             }\n         });\n\n        let dispose = Scheduler.async;\n        console.log(dispose.active);\n    }\n}\n"],"sourceRoot":"/source/"}